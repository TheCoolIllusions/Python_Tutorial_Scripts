import subprocess
import sys

def install(package):
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])

try:
    import pygame
    import sys

except ModuleNotFoundError:
       print("[-] Pygame not found. ")
       print("[+] Installing...")
       install('pygame')
       import pygame



pygame.init()

#Screem size 
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Ping Pong ~ by Surge")

#Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

#Paddle Properties
PADDLE_WIDTH = 10
PADDLE_HEIGHT = 100
PADDLE_SPEED = 5

#BALL PROPERTIES
BALL_SIZE = 10
BALL_SPEED = 5
#put it in a class now 
class Paddle(pygame.Rect):
                def __init__(self, x, y):
                                super().__init__(x, y, PADDLE_WIDTH, PADDLE_HEIGHT)
                                self.speed = PADDLE_SPEED

class Ball(pygame.Rect):
                    def __init__(self):
                                super().__init__(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, BALL_SIZE, BALL_SIZE)
                                self.speed_x = BALL_SPEED # Initial horizontal speed
                                self.speed_y = BALL_SPEED  # Initial vertical speed

                    def move(self):
                                self.x += self.speed_x
                                self.y += self.speed_y

                                # Bounce off the top and bottom of the screen
                                if self.y <= 0 or self.y >= SCREEN_HEIGHT - BALL_SIZE:
                                    self.speed_y *= -1

                    def bounce(self):
                                    self.speed_x *= -1


def draw_text(text, font_size, x, y):
                font = pygame.font.Font(None, font_size)
                text_surface = font.render(text, True, WHITE)
                screen.blit(text_surface, (x, y))


def main():
        clock = pygame.time.Clock()
        paddle1 = Paddle(10, SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2)
        paddle2 = Paddle(SCREEN_WIDTH - 20, SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2)
        ball = Ball()
        score1 = 0
        score2 = 0


        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()

            keys = pygame.key.get_pressed()
            if keys[pygame.K_w]:
                paddle1.y -= paddle1.speed
            if keys[pygame.K_s]:
                paddle1.y += paddle1.speed
            if keys[pygame.K_UP]:
                paddle2.y -= paddle2.speed
            if keys[pygame.K_DOWN]:
                paddle2.y += paddle2.speed


            if paddle1.y < 0:
                paddle1.y = 0
            elif paddle1.y > SCREEN_HEIGHT - PADDLE_HEIGHT:
                paddle1.y = SCREEN_HEIGHT - PADDLE_HEIGHT
            if paddle2.y < 0:
                paddle2.y = 0
            elif paddle2.y > SCREEN_HEIGHT - PADDLE_HEIGHT:
                paddle2.y = SCREEN_HEIGHT - PADDLE_HEIGHT

            ball.move()


            if ball.colliderect(paddle1) or ball.colliderect(paddle2):
                ball.bounce()


            if ball.x < 0:
                score2 += 1
                ball.x = SCREEN_WIDTH / 2
                ball.y = SCREEN_HEIGHT / 2
                ball.speed_x = -BALL_SPEED
            elif ball.x > SCREEN_WIDTH - BALL_SIZE:
                score1 += 1
                ball.x = SCREEN_WIDTH / 2
                ball.y = SCREEN_HEIGHT / 2
                ball.speed_x = -BALL_SPEED

            screen.fill(BLACK)
            pygame.draw.rect(screen, WHITE, paddle1)
            pygame.draw.rect(screen, WHITE, paddle2)
            pygame.draw.ellipse(screen, WHITE, ball)
            draw_text(str(score1), 64, SCREEN_WIDTH / 4, 20)
            draw_text(str(score2), 64, SCREEN_WIDTH * 3 / 4, 20)       
            pygame.draw.line(screen, WHITE, (SCREEN_WIDTH / 2, 0), (SCREEN_WIDTH / 2, SCREEN_HEIGHT), 1) 

            pygame.display.update()
            clock.tick(60)

if __name__ == "__main__":
    main()                
